-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/vladimir-brezgunov/fp-newbies/tree/master/interpreter#readme</a>
@package interpreter
@version 0.2.0.0

module SimpleInteractiveInterpreter

-- | Алгебраический тип для представления произвольных выражений.
data Expr

-- | Выражение может быть константным значением...
Const :: Double -> Expr

-- | ...либо бинарным оператором, применённым к левому и правому
--   подвыражениям.
BinaryOp :: Op -> Expr -> Expr -> Expr

-- | Простой тип-перечисление для поддерживаемых бинарных операторов.
data Op
Add :: Op
Sub :: Op
Mul :: Op
Div :: Op
Rem :: Op

-- | Набор парсеров, полученный из описания того, что может встретиться в
--   языке.
calcLang :: () => GenTokenParser String u Identity

-- | Список, задающий, какой символ в какой оператор нужно превратить.
operators :: [[(Char, Op)]]

-- | Таблица парсеров операторов с убыванием приоритета, сконвертированная
--   из <a>operators</a>.
table :: () => [[Operator String u Identity Expr]]

-- | Парсер числовых констант.
pConst :: () => ParsecT String u Identity Expr

-- | Парсер арифметических выражений, который сгенерирован <i>Parsec</i> из
--   описания операторов.
pExpr :: () => ParsecT String u Identity Expr

-- | Парсер элементов, из которых могут составляться выражения - сейчас это
--   либо константы, либо подвыражения в скобках.
pTerm :: () => ParsecT String u Identity Expr
eval :: Expr -> Double

-- | Результат – это опциональный <a>Double</a>.
type Result = Maybe Double

-- | Тип для интерпретатора, который должен иметь информацию о переменных и
--   функциях. Сейчас их нет, поэтому тип – заглушка и даже не имеет
--   значений.
data Interpreter

-- | Средство создать новый экземпляр интерпретатора, пока тоже заглушка.
newInterpreter :: Interpreter

-- | Итоговая функция, которую по требованию задачи должен экспортировать
--   модуль. Ей можно скормить строку с состоянием интерпретатора и
--   получить результат с новым состоянием (либо ошибку).
input :: String -> Interpreter -> Either String (Result, Interpreter)
